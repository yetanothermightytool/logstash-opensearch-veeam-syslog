input {
  tcp {
    port => 5514
    type => "syslog"
    codec => plain {
      charset => "UTF-8"
    }
  }
}

filter {
  if [type] == "syslog" or [type] == "syslog-tls" {
    # Existing VBR Grok pattern
    grok {
      match => {
        "message" => "<%{POSINT:priority}>%{NUMBER:version} %{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:sourcehost} %{WORD:product} - - \[%{DATA:origin}\] \[%{GREEDYDATA:data}\]"
      }
      tag_on_failure => ["_grok_vbr_failure"]
      add_tag => ["_grok_vbr_success"]
    }

    # Additional VONE Grok pattern
    grok {
      match => {
        "message" => "<%{NONNEGINT:priority}>%{NONNEGINT:version} %{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} %{HOSTNAME:appname} %{POSINT:procid} %{DATA:msgid} \[%{DATA:origin}\] %{GREEDYDATA:message}"
      }
      tag_on_failure => ["_grok_vone_failure"]
      add_tag => ["_grok_vone_success"]
    }

    if "_grok_vbr_success" in [tags] {
      # Existing VBR processing logic
      date {
        match => [ "timestamp", "ISO8601" ]
      }

      grok {
        match => {
          "origin" => "enterpriseId=\"%{NUMBER:enterpriseId}\""
        }
      }

      # Debugging to see the data field
      ruby {
        code => 'event.set("raw_data", event.get("data"))'
      }

      kv {
        source => "data"
        field_split => " "
        value_split => "="
        target => "vbr_data"
        trim_key => " \""
        trim_value => " \""
      }

      mutate {
        add_field => {
          "categoryId" => "%{[vbr_data][categoryId]}"
          "instanceId" => "%{[vbr_data][instanceId]}"
          "VbrVersion" => "%{[vbr_data][VbrVersion]}"
          "Description" => "%{[vbr_data][Description]}"
        }
      }

      if [vbr_data][JobSessionID] {
        mutate {
          add_field => {
            "JobSessionID" => "%{[vbr_data][JobSessionID]}"
          }
        }
      }
      if [vbr_data][JobID] {
        mutate {
          add_field => {
            "JobID" => "%{[vbr_data][JobID]}"
          }
        }
      }
      if [vbr_data][JobType] {
        mutate {
          add_field => {
            "JobType" => "%{[vbr_data][JobType]}"
          }
        }
      }
      if [vbr_data][Platform] {
        mutate {
          add_field => {
            "Platform" => "%{[vbr_data][Platform]}"
          }
        }
      }
      if [vbr_data][Flags] {
        mutate {
          add_field => {
            "Flags" => "%{[vbr_data][Flags]}"
          }
        }
      }
    } else if "_grok_vone_success" in [tags] {
      # Additional VONE processing logic
      date {
        match => [ "timestamp", "ISO8601" ]
      }

      # Extract key-value pairs for VONE data
      kv {
        source => "message"
        field_split => " "
        value_split => "="
        target => "vone_data"
        trim_key => " \""
        trim_value => " \""
      }

      mutate {
        add_field => {
          "alarm_name" => "%{[vone_data][alarm_name]}"
        }
      }
    }
  }
}

output {
  if "_grok_vone_success" in [tags] {
    opensearch {
      hosts => ["https://127.0.0.1:9200"]
      index => "veeam-vone-%{+YYYY.MM.dd}"
      user => "admin"
      password => "Cham.2025op!"
      ssl_certificate_verification => false
    }
  } else if "_grok_vbr_success" in [tags] {
    opensearch {
      hosts => ["https://127.0.0.1:9200"]
      index => "veeam-vbr-%{+YYYY.MM.dd}"
      user => "admin"
      password => "Cham.2025op!"
      ssl_certificate_verification => false
    }
  }

  stdout { codec => rubydebug }  # Output to console for debugging
}
